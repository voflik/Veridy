<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_140262_veridy.VeridyUtils</api_name>
        <client_callable>false</client_callable>
        <description>Holds the logic for veridy functions</description>
        <name>VeridyUtils</name>
        <script><![CDATA[var VeridyUtils = Class.create();
VeridyUtils.prototype = {
    initialize: function() {
		// Field weights from system properties table
		this.classWeight = parseInt(gs.getProperty("x_140262_veridy.ci_match.field_weight.class", 5));
		this.manufacturerWeight = parseInt(gs.getProperty("x_140262_veridy.ci_match.field_weight.manufacturer", 6));
		this.modelWeight = parseInt(gs.getProperty("x_140262_veridy.ci_match.field_weight.model", 12));
		this.serialNumberWeight = parseInt(gs.getProperty("x_140262_veridy.ci_match.field_weight.serial_number", 51));
		this.assetWeight = parseInt(gs.getProperty("x_140262_veridy.ci_match.field_weight.asset_tag", 26));		
		
		// Confidence Thresholds from the system properties table
		this.highConfidence = gs.getProperty("x_140262_veridy.ci_match.high_confidence_threshold", 70);
		this.mediumConfidence = gs.getProperty("x_140262_veridy.ci_match.medium_confidence_threshold", 35);
		this.lowConfidence = gs.getProperty("x_140262_veridy.ci_match.low_confidence_threshold", 1);
		
		// Auto update CMDB property
		this.autoUpdateCMDB = gs.getProperty("x_140262_veridy.ci_match.auto_update_cmdb", "false");
    },

	/*
		main Function
		performs the heuristic matching of juxtapose and CMDB items
		input: 40 char veridy id 
		output: returns "1" if successful
	*/
	matchJuxtaposeToCMDB: function(veridy_id) {
		
		//edges are connections between the two node types
		var edges = [];
		var nodesJuxtapose = [];
		var nodesCMDB = [];
		
		//read in all items from Jux. table with veridy_id
		var grJuxtapose = new GlideRecord("x_140262_veridy_juxtapose");		
		grJuxtapose.addQuery("veridy_id="+veridy_id);
		grJuxtapose.query();
		
		//add them to Juxtapose nodes
		while(grJuxtapose.next()) {
			nodesJuxtapose.push(
				this.createNode(
					grJuxtapose.getValue("sys_id"), 
					grJuxtapose.getValue("actual_tag"), 
					grJuxtapose.getValue("actual_serial"), 
					grJuxtapose.getValue("actual_model"), 
					grJuxtapose.getValue("actual_manufacturer"), 
					grJuxtapose.getValue("actual_class") 
				)
			);
		}

		
		//read in all active items from CMDB 
		var grCi = new GlideRecord("cmdb_ci");
		grCi.addActiveQuery();
		grCi.addQuery("install_status!=7");
		grCi.query();
		
		//add them to Cmdb nodes
		while(grCi.next()) {
			nodesCMDB.push(
				this.createNode(
					grCi.getValue("sys_id"), 
					grCi.getValue("name"), 
					grCi.getValue("serial_number"), 
					grCi.model_id.name,
					grCi.getDisplayValue("manufacturer"), 
					grCi.getDisplayValue("sys_class_name")
				)
			);
		}
		
		
		//calculate matches
		var i = 0;
		var j = 0;
		for(i = 0; i < nodesJuxtapose.length; i++){
			for(j = 0; j < nodesCMDB.length; j++){
				edges.push(
					this.createEdge(
						nodesJuxtapose[i].id, 
						nodesCMDB[j].id, 
						this.computeConfidence(nodesJuxtapose[i], nodesCMDB[j])
					)
				);
			}
		}
	
		
		//sort the matches 
		this.sortAsc(edges);
		
		//finalConnections holds the matched edges
		var finalConnections = [];
		
		/*
		Traverses the edges array, picks the best connection for each item in the Juxtapose table, removes all other connections from the edge array
		*/
		while(edges.length > 0 ) {
			var top = edges[0];
			finalConnections.push(top);
			edges = this.remove(top, edges);

		}
		
		
		
		//querying the juxtapose table again
		grJuxtapose = new GlideRecord("x_140262_veridy_juxtapose");
		grJuxtapose.addQuery("veridy_id", veridy_id);
		grJuxtapose.query();
		
		//setting: calculated confience level, matched CI, and match confidence
		while(grJuxtapose.next()) {
			for(i = 0; i < finalConnections.length; i++) {
				if(grJuxtapose.getValue("sys_id") == finalConnections[i].juxtaposeRecordId) {								
					if(finalConnections[i].weight >= this.highConfidence) {
						grJuxtapose.setValue("match_confidence", "high");
						grJuxtapose.setValue("matching_ci", finalConnections[i].cmdbRecordId);
						grJuxtapose.setValue("calculated_confidence_level", finalConnections[i].weight);
					} else if(finalConnections[i].weight >= this.mediumConfidence) {
						grJuxtapose.setValue("match_confidence", "medium");
						grJuxtapose.setValue("matching_ci", finalConnections[i].cmdbRecordId);
						grJuxtapose.setValue("calculated_confidence_level", finalConnections[i].weight);
					} else if(finalConnections[i].weight >= this.lowConfidence) {
						grJuxtapose.setValue("match_confidence", "low");
						grJuxtapose.setValue("matching_ci", finalConnections[i].cmdbRecordId);
						grJuxtapose.setValue("calculated_confidence_level", finalConnections[i].weight);
					} else {
						grJuxtapose.setValue("match_confidence", "none");				
						grJuxtapose.setValue("calculated_confidence_level", finalConnections[i].weight);				
					}

					grJuxtapose.update();
	
					// If the Auto Update property is true retire that CI and save it's previous state
					var prevState = ""; // Holds previous state
					if(this.autoUpdateCMDB === "true" && grJuxtapose.match_confidence == "high" && grJuxtapose.match_type == "Perfect") {
						prevState = this.retireConfigurationItem(grJuxtapose); // Auto retire CI
						grJuxtapose.setValue("previous_ci_state", prevState);
						grJuxtapose.update();
					}
				}
			}
		}
		
		return 1;		
	},
	
		
	//object that holds a record from cmdb or jux table
	createNode: function(uid,tag, ser_num, model, manu, classT ) {
		return {id: uid, tag: tag, serial: ser_num, model: model, manufacturer: manu, classType:classT};	
	},
	
	//object that represents a connection between nodes
	createEdge: function(juxtaposeSysId, cmdbSysId, edgeWeight) {
		return {juxtaposeRecordId:juxtaposeSysId, cmdbRecordId:cmdbSysId, weight:edgeWeight};
	},
	
		
	//removes all edges from the "edges" array that contains a node from edge "e" 
	remove:function(e,edges) {
		var newList = [];

		for(var i = 0; i < edges.length; i++){
			if(edges[i].juxtaposeRecordId != e.juxtaposeRecordId && edges[i].cmdbRecordId != e.cmdbRecordId){
				newList.push(edges[i]);
			}
		}
		
		return newList;
	},
	
	//sorts the list of edges in ascending order of confidence
	sortAsc:function(edges) {
		edges.sort(function(a,b) {
			return b.weight - a.weight;
		});
	},

	//queries the system property table and computes the confidence 
	computeConfidence:function(juxtaposeNode,cmdbNode) {
			var confidence = 0;
		
			if(juxtaposeNode.tag.toString().toLowerCase() == cmdbNode.tag.toString().toLowerCase() && 
			   this.checkIgnoredStrings(juxtaposeNode.tag.toString())) {
				confidence += this.assetWeight;
			}	
		
			if(juxtaposeNode.serial != undefined && cmdbNode.serial != undefined){
				if(juxtaposeNode.serial.toString().toLowerCase() == cmdbNode.serial.toString().toLowerCase() &&
				   this.checkIgnoredStrings(juxtaposeNode.serial.toString())) {
					confidence += this.serialNumberWeight;
				}		
			}

			/*
			if(juxtaposeNode.model.toString().toLowerCase() == cmdbNode.model.toString().toLowerCase() && 
			   this.checkIgnoredStrings(juxtaposeNode.model.toString())) {
				confidence += this.modelWeight;
			}
			*/
			if(juxtaposeNode.manufacturer.toString().toLowerCase() == cmdbNode.manufacturer.toString().toLowerCase() && 
			   this.checkIgnoredStrings(juxtaposeNode.manufacturer.toString())) {
				confidence += this.manufacturerWeight;
			}
			/*
			if(juxtaposeNode.classType == cmdbNode.classType) {
				confidence += this.classWeight;
			}
			*/
		
		return confidence;
	},
	
		//Checks for certain strings that should be excluded from the Confidence Match
	checkIgnoredStrings: function(input){
		var ignoreStrings = 'N/A NA N.A UNTAGGED NOT ISSUED UNRECORDED n/a na n.a untagged not issued unrecorded';
		var result = ignoreStrings.indexOf(input);

		if(result < 0){
			return true;
		}else{
			return false;
		}
	},
	
	/**
	* This method is triggered from the Retire UI Action on the Juxtapose table.
	* The matched configuration item's status is updated to retired and it's previous 
	* state is returned to the UI Action script
	* 
	* @param GlideRecord juxtapose The current object being passed from the UI Action
	* @return String This returns the Configuration Item's previous state
	*/
	retireConfigurationItem: function(grJuxtapose) {
		var prevStatus = "";
		var grConfigItem = new GlideRecord('cmdb_ci');
		
		if(grConfigItem.get(grJuxtapose.matching_ci)) {
			prevStatus = grConfigItem.getValue('install_status') + ' - ' + grConfigItem.install_status.getDisplayValue();
			grConfigItem.setValue('install_status', 7); // Set status to Retired
			grConfigItem.update();
		}
		return prevStatus; 
	},
	
	/**
	* This method is triggered from the Rollback UI Action on the Juxtapose table.
	* The matched configuration item's status is reverted back to it's previous status
	* 
	* @param GlideRecord grJuxtapose The current object being passed from the UI Action
	* @return String This returns the Configuration Item's previous state
	*/
	rollbackConfigurationItem: function(grJuxtapose) {
		
		var prevStatus = "";
		var splitStatus = grJuxtapose.getValue('previous_ci_state'); 
		splitStatus = splitStatus.split('-'); // Split the choice value from it's label
		var rollbackStatus = splitStatus[0];  // Previous status' choice value
		var grConfigItem = new GlideRecord('cmdb_ci');

		if(grConfigItem.get(grJuxtapose.matching_ci)) {
			prevStatus = grConfigItem.getValue('install_status') + ' - ' + grConfigItem.install_status.getDisplayValue();
			grConfigItem.setValue('install_status', rollbackStatus);
			grConfigItem.update();
		}
		return prevStatus;
	},
		
    type: 'VeridyUtils'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>AFurgiuele</sys_created_by>
        <sys_created_on>2018-06-19 15:46:21</sys_created_on>
        <sys_id>6ec531a94f7213009be84e318110c756</sys_id>
        <sys_mod_count>232</sys_mod_count>
        <sys_name>VeridyUtils</sys_name>
        <sys_package display_value="Veridy" source="x_140262_veridy">b8bbf0d44f3213009be84e318110c774</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_scope display_value="Veridy">b8bbf0d44f3213009be84e318110c774</sys_scope>
        <sys_update_name>sys_script_include_6ec531a94f7213009be84e318110c756</sys_update_name>
        <sys_updated_by>JLee</sys_updated_by>
        <sys_updated_on>2018-07-05 20:33:47</sys_updated_on>
    </sys_script_include>
</record_update>
